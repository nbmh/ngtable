{"version":3,"sources":["../../src/components/paginator.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAM,MAAO,eAAA,CAAgB;AAKjD;IAAA;QAGU,kBAAa,GAAY,IAAI,CAAC;IAuFxC,CAAC;IApFC,sBAAI,qCAAO;aAAX,UAAY,KAAc;YACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC;;;OAAA;IAED,sBAAI,0CAAY;aAAhB;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;aAGD,UAAiB,MAAe;YAC9B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAC9B,CAAC;;;OALA;IAOD,sCAAW,GAAX,UAAY,CAAiB;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;QAC9B,CAAC;IACH,CAAC;IAmEH,uBAAC;AAAD,CA1FA,AA0FC;;AAjEM,2BAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,oBAAoB;gBAC9B,QAAQ,EAAE,irCAmBT;gBACD,MAAM,EAAE,CAAC,0sBA8BR,CAAC;gBACF,IAAI,EAAE,EAAC,OAAO,EAAE,oBAAoB,EAAC;aACtC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,+BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,+BAAc,GAA2C;IAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CACjC,CAAC","file":"paginator.component.js","sourceRoot":"","sourcesContent":["import { Component, Input } from '@angular/core';\nimport { NgTable } from './table.component';\nimport { MdSelectChange } from '@angular/material';\n\n\nexport class NgTablePaginator {\n\n   table: NgTable;\n  private _rangeVisible: boolean = true;\n\n  \n  set ngTable(value: NgTable) {\n    this.table = value;\n  }\n\n  get rangeVisible(): boolean {\n    return this._rangeVisible;\n  }\n\n  \n  set rangeVisible(status: boolean) {\n    this._rangeVisible = status;\n  }\n\n  actionRange(e: MdSelectChange):void  {\n    if (this.table) {\n      this.table.range = +e.value;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ng-table-paginator',\n  template: `\n<div class=\"ng-table-paginator-page-size\" *ngIf=\"rangeVisible && !table.empty\">\n  <div class=\"ng-table-paginator-page-size-label\">\n    Items per page\n  </div>\n  <md-select class=\"ng-table-paginator-page-size-select\" [(ngModel)]=\"table.range\" (change)=\"actionRange($event)\" [disabled]=\"table.loading\">\n    <md-option *ngFor=\"let count of table.rangeOptions\" [value]=\"count\">\n      {{count}}\n    </md-option>\n  </md-select>\n</div>\n<div class=\"ng-table-paginator-page-label\" *ngIf=\"!table.empty\">\n  Page {{table.page}} of {{table.totalPages}} |\n  Items <span *ngIf=\"table.rows.length > 1\">{{table.from}} - {{table.to}}</span>\n  <span *ngIf=\"table.rows.length == 1\">{{table.from}}</span>\n  of {{table.totalRows}}\n</div>\n<button md-icon-button *ngIf=\"!table.empty\" (click)=\"table.prev()\" [disabled]=\"!table.hasPrev || table.loading\" mdTooltip=\"Previous page\"><md-icon class=\"material-icons\">keyboard_arrow_left</md-icon></button>\n<button md-icon-button *ngIf=\"!table.empty\" (click)=\"table.next()\" [disabled]=\"!table.hasNext || table.loading\" mdTooltip=\"Next page\"><md-icon class=\"material-icons\">keyboard_arrow_right</md-icon></button>\n  `,\n  styles: [`\n:host(.ng-table-paginator) {\n  font-family: Roboto,Helvetica Neue,sans-serif;\n  font-size: 12px;\n  background: #fff;\n  color: rgba(0,0,0,.54);\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n  min-height: 56px;\n  padding: 0 8px;\n}\n\n:host(.ng-table-paginator) /deep/ .ng-table-paginator-page-size {\n  display: flex;\n  align-items: center;\n}\n\n:host(.ng-table-paginator) /deep/ .ng-table-paginator-page-size-label {\n  margin: 0 8px 0 0;\n}\n\n:host(.ng-table-paginator) /deep/ .ng-table-paginator-page-size-select .mat-select-trigger {\n  min-width: 60px;\n  font-size: 12px;\n}\n\n:host(.ng-table-paginator) /deep/ .ng-table-paginator-page-label {\n  margin: 0 32px;\n}\n  `],\n  host: {'class': 'ng-table-paginator'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'table': [{ type: Input },],\n'ngTable': [{ type: Input },],\n'rangeVisible': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}