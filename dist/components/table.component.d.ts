import { OnInit, AfterViewInit, OnDestroy, EventEmitter } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { NgTableSource } from '../ngtable.source';
import { NgTableInitEvent, NgTableRangeEvent, NgTableBeforeConnectEvent, NgTableAfterConnectEvent, NgTableDestroyEvent } from '../ngtable.events';
export declare class NgTable implements OnInit, AfterViewInit, OnDestroy {
    private activeRoute;
    private _dataSourceSubscriber;
    private _rows;
    private _totalRows;
    private _page;
    private _totalPages;
    private _from;
    private _to;
    private _dataSource;
    private _initialized;
    private _queryPage;
    private _querySubscriber;
    initEmitter: EventEmitter<NgTableInitEvent>;
    destroyEmitter: EventEmitter<NgTableDestroyEvent>;
    beforeConnectEmitter: EventEmitter<NgTableBeforeConnectEvent>;
    afterConnectEmitter: EventEmitter<NgTableAfterConnectEvent>;
    rangeChangeEmitter: EventEmitter<NgTableRangeEvent>;
    constructor(activeRoute: ActivatedRoute);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    dataSource: NgTableSource;
    protected calculate(rows: any[], totalRows: number): void;
    protected requestData(): void;
    removeRow(row: any): NgTable;
    updateRow(row: any): NgTable;
    addRow(row: any): NgTable;
    readonly rows: Array<any>;
    queryPage: string;
    page: number;
    readonly totalPages: number;
    readonly totalRows: number;
    readonly from: number;
    readonly to: number;
    range: number;
    rangeOptions: Array<number>;
    readonly initialized: boolean;
    readonly loading: boolean;
    readonly empty: boolean;
    refresh(): NgTable;
    prev(): NgTable;
    next(): NgTable;
    readonly hasPrev: boolean;
    readonly hasNext: boolean;
    readonly isFirst: boolean;
    readonly isLast: boolean;
}
