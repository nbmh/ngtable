{"version":3,"sources":["../../src/components/more.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAA,SAAE,EAAU,KAAA,EAAM,MAAM,eAAA,CAAgB;AAK/C;IAAA;QAGU,kBAAa,GAAY,IAAI,CAAC;QAC9B,WAAM,GAAW;YACvB,cAAc,EAAW,gBAAgB;YACzC,IAAI,EAAW,MAAM;YACrB,OAAO,EAAW,IAAI;YACtB,KAAK,EAAW,OAAO;YACvB,QAAQ,EAAW,IAAI;SACxB,CAAC;IAiEJ,CAAC;IA/DC,sBAAI,8BAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QACrB,CAAC;aAGD,UAAU,KAAa;YACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC;;;OALA;IAQD,sBAAI,gCAAO;aAAX,UAAY,KAAc;YACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACrB,CAAC;;;OAAA;IAED,sBAAI,qCAAY;aAAhB;YACE,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;QAC5B,CAAC;aAGD,UAAiB,MAAe;YAC9B,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAC9B,CAAC;;;OALA;IAOD,iCAAW,GAAX,UAAY,CAAM;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;QAC9B,CAAC;IACH,CAAC;IAoCH,kBAAC;AAAD,CA3EA,AA2EC;;AAlCM,sBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACxB,QAAQ,EAAE,eAAe;gBACzB,QAAQ,EAAE,yJAET;gBACD,MAAM,EAAE,CAAC,8TAeR,CAAC;gBACF,IAAI,EAAE,EAAC,OAAO,EAAE,eAAe,EAAC;aACjC,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,0BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,0BAAc,GAA2C;IAChE,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC3B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAG,EAAE,EAAE;IAC/C,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC7B,cAAc,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;CACjC,CAAC","file":"more.component.js","sourceRoot":"","sourcesContent":["import {Component, Input} from '@angular/core';\nimport {NgTable} from './table.component';\n\n\n\nexport class NgTableMore {\n\n   table: NgTable;\n  private _rangeVisible: boolean = true;\n  private _label: Object = {\n    items_per_page: <string> 'Items per page',\n    page: <string> 'Page',\n    of_page: <string> 'of',\n    items: <string> 'Items',\n    of_items: <string> 'of',\n  };\n\n  get label(): Object {\n    return this._label;\n  }\n\n  \n  set label(value: Object) {\n    this._label = Object.assign({}, this._label, value);\n  }\n\n  \n  set ngTable(value: NgTable) {\n    this.table = value;\n  }\n\n  get rangeVisible(): boolean {\n    return this._rangeVisible;\n  }\n\n  \n  set rangeVisible(status: boolean) {\n    this._rangeVisible = status;\n  }\n\n  actionRange(e: any):void  {\n    if (this.table) {\n      this.table.range = +e.value;\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ng-table-more',\n  template: `\n    <button class=\"ng-table-more-button\" *ngIf=\"table.rows.length<table.totalRows\" (click)=\"table.more()\" title=\"Load more\">More</button>\n  `,\n  styles: [`\n:host(.ng-table-more) {\n  font-family: Roboto,Helvetica Neue,sans-serif;\n  font-size: 12px;\n  background: #fff;\n  color: rgba(0,0,0,.54);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 56px;\n}\n\n:host(.ng-table-more) /deep/ .ng-table-more-button {\n  width: 100%;\n}\n  `],\n  host: {'class': 'ng-table-more'}\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'table': [{ type: Input },],\n'label': [{ type: Input, args: ['labels', ] },],\n'ngTable': [{ type: Input },],\n'rangeVisible': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}